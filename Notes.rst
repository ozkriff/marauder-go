Разделить inputHandler на непосредственно
получение событий и их обработку.
Т.к. последнее можно будет протестировать :)

Показать все названия пакетов, кроме тестовых::

    find . -name "*.go" | xargs grep "^package" --color --no-filename | uniq | grep -v _test | sort

Переделать взаимодействие с ui - выполнять логику
игры, рисование и получение ввода - в разных потоках!


Недостатки Golang
-----------------

Как оказалозь, значительной проблемой для меня является не забить на
эту версию игры. Очень уж меня тянет найти "идеальный" язык и т.п.
То всякие haskell'и пытаюсь освоить, то опять тыкаю cython,
то думаю о своем простом языке, компилирующемся в си.

Хочу тут перечислить основные недостатки и достоинства golang,
что б не вспоминать их каждый раз, когда меня переклинит:

Плюсы:

  - общая простота дизайна, малое количество неявных действий

  - в основной реализации не используется С++

  - есть gccgo, но я его вообще не тыкал

  - довольно быстрый

    Бенчмарки отстают от си всего раза в два

  - Сборка мусора

    С кучей потоков это должно помочь

  - код выходит довольно читабельным, достаточно посмотреть на стандартные
    библиотеки

  - Интерфейсы, АГРХ, это очень здорово

  - gofmt мне по душе

  - автоматическое разруливание\вытягивание зависимостей с гитхабов

Минусы:

  - все-таки, не такой быстрый как С++

    - возможно, получится компенсировать дешевой параллельностью

  - нет шаблонов - дженериков

    - но их хотят-таки впихнуть в язык (хотя я бы уже не надеялся)

    - интерфейсы, вроде, справляются с большей частью проблем

  - несколько странные правила передачи аргуентов в функции.
    Чего-то там по значению, другое - по ссылке.

    - Думаю, к этому уж можно быстро привыкнуть

  - Динамические библиотеки? Андроид?

    - В списке рассылки видел разговоры о том, что это все вполне возможно.

  - Вытягивание зависимостей с гитхабов не знает о существовании
    разных версий. Частый неофициальный совет - форкать зависимости, грустно
